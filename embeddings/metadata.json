[{"type": "function", "name": "main", "file": "farmer_management/main.py", "docstring": null, "code": "def main():\n    # Initialize components\n    country_api_manager = CountryAPIManager()\n    data_enricher = DataEnricher()\n    database_manager = DatabaseManager()\n    event_handler = EventHandler(data_enricher, country_api_manager, database_manager)\n\n    # Example farmer data\n    farmer_data = {\n        \"name\": \"John Doe\",\n        \"country\": \"USA\",\n        \"crops\": [\"corn\", \"wheat\"],\n        \"experience_years\": 5,\n    }\n\n    try:\n        # Validate data\n        validate_farmer_data(farmer_data)\n\n        # Process and send data\n        farmer_id = \"farmer_123\"\n        response = event_handler.process_farmer_data(farmer_id, farmer_data)\n        print(\"Response:\", response)\n    except ValueError as e:\n        print(\"Validation Error:\", e)\n", "calls": ["CountryAPIManager", "DataEnricher", "DatabaseManager", "EventHandler", "validate_farmer_data", "process_farmer_data", "print", "print"], "keywords": ["validation", "USA", "API", "farmer"]}, {"type": "class", "name": "DataEnricher", "file": "farmer_management/app/data_enricher.py", "docstring": "Enriches farmer data with country-specific rules and additional attributes.", "methods": [{"name": "enrich", "docstring": "Enriches data based on the farmer's country.\n\nArgs:\n    data (dict): Farmer data to enrich.\n\nReturns:\n    dict: Enriched farmer data.", "code": "    def enrich(self, data):\n        \"\"\"\n        Enriches data based on the farmer's country.\n\n        Args:\n            data (dict): Farmer data to enrich.\n\n        Returns:\n            dict: Enriched farmer data.\n        \"\"\"\n        country = data.get(\"country\")\n        if country == \"India\":\n            return self._enrich_india(data)\n        elif country == \"USA\":\n            return self._enrich_usa(data)\n        elif country == \"France\":\n            return self._enrich_france(data)\n        else:\n            raise ValueError(f\"No enrichment rules defined for country: {country}\")\n", "keywords": ["USA", "enrichment", "farmer", "India", "France"]}, {"name": "_enrich_india", "docstring": "Adds enrichment rules for farmers in India.", "code": "    def _enrich_india(self, data):\n        \"\"\"\n        Adds enrichment rules for farmers in India.\n        \"\"\"\n        data[\"subsidy_eligibility\"] = data.get(\"experience_years\", 0) > 3\n        data[\"crop_expertise\"] = (\n            \"Rice\" if \"rice\" in data.get(\"crops\", []) else \"General\"\n        )\n        return data\n", "keywords": ["enrichment", "farmer", "India"]}, {"name": "_enrich_usa", "docstring": "Adds enrichment rules for farmers in the USA.", "code": "    def _enrich_usa(self, data):\n        \"\"\"\n        Adds enrichment rules for farmers in the USA.\n        \"\"\"\n        data[\"crop_insurance\"] = \"Premium Plan\"\n        data[\"crop_expertise\"] = (\n            \"Corn\" if \"corn\" in data.get(\"crops\", []) else \"General\"\n        )\n        return data\n", "keywords": ["USA", "enrichment", "farmer"]}, {"name": "_enrich_france", "docstring": "Adds enrichment rules for farmers in France.", "code": "    def _enrich_france(self, data):\n        \"\"\"\n        Adds enrichment rules for farmers in France.\n        \"\"\"\n        data[\"farming_guidelines\"] = \"Follow EU standards\"\n        data[\"crop_expertise\"] = (\n            \"Grapes\" if \"grapes\" in data.get(\"crops\", []) else \"General\"\n        )\n        return data\n", "keywords": ["enrichment", "farmer", "France"]}], "keywords": ["USA", "enrichment", "farmer", "India", "France"]}, {"type": "function", "name": "enrich", "file": "farmer_management/app/data_enricher.py", "docstring": "Enriches data based on the farmer's country.\n\nArgs:\n    data (dict): Farmer data to enrich.\n\nReturns:\n    dict: Enriched farmer data.", "code": "    def enrich(self, data):\n        \"\"\"\n        Enriches data based on the farmer's country.\n\n        Args:\n            data (dict): Farmer data to enrich.\n\n        Returns:\n            dict: Enriched farmer data.\n        \"\"\"\n        country = data.get(\"country\")\n        if country == \"India\":\n            return self._enrich_india(data)\n        elif country == \"USA\":\n            return self._enrich_usa(data)\n        elif country == \"France\":\n            return self._enrich_france(data)\n        else:\n            raise ValueError(f\"No enrichment rules defined for country: {country}\")\n", "calls": ["get", "_enrich_india", "_enrich_usa", "_enrich_france", "ValueError"], "keywords": ["USA", "enrichment", "farmer", "India", "France"]}, {"type": "function", "name": "_enrich_india", "file": "farmer_management/app/data_enricher.py", "docstring": "Adds enrichment rules for farmers in India.", "code": "    def _enrich_india(self, data):\n        \"\"\"\n        Adds enrichment rules for farmers in India.\n        \"\"\"\n        data[\"subsidy_eligibility\"] = data.get(\"experience_years\", 0) > 3\n        data[\"crop_expertise\"] = (\n            \"Rice\" if \"rice\" in data.get(\"crops\", []) else \"General\"\n        )\n        return data\n", "calls": ["get", "get"], "keywords": ["enrichment", "farmer", "India"]}, {"type": "function", "name": "_enrich_usa", "file": "farmer_management/app/data_enricher.py", "docstring": "Adds enrichment rules for farmers in the USA.", "code": "    def _enrich_usa(self, data):\n        \"\"\"\n        Adds enrichment rules for farmers in the USA.\n        \"\"\"\n        data[\"crop_insurance\"] = \"Premium Plan\"\n        data[\"crop_expertise\"] = (\n            \"Corn\" if \"corn\" in data.get(\"crops\", []) else \"General\"\n        )\n        return data\n", "calls": ["get"], "keywords": ["USA", "enrichment", "farmer"]}, {"type": "function", "name": "_enrich_france", "file": "farmer_management/app/data_enricher.py", "docstring": "Adds enrichment rules for farmers in France.", "code": "    def _enrich_france(self, data):\n        \"\"\"\n        Adds enrichment rules for farmers in France.\n        \"\"\"\n        data[\"farming_guidelines\"] = \"Follow EU standards\"\n        data[\"crop_expertise\"] = (\n            \"Grapes\" if \"grapes\" in data.get(\"crops\", []) else \"General\"\n        )\n        return data\n", "calls": ["get"], "keywords": ["enrichment", "farmer", "France"]}, {"type": "class", "name": "EventHandler", "file": "farmer_management/app/event_handler.py", "docstring": "Handles events related to farmer data.", "methods": [{"name": "__init__", "docstring": null, "code": "    def __init__(self, data_enricher, country_api_manager, database_manager):\n        self.data_enricher = data_enricher\n        self.country_api_manager = country_api_manager\n        self.database_manager = database_manager\n", "keywords": ["API"]}, {"name": "process_farmer_data", "docstring": "Processes and enriches farmer data, then sends it to the country's API.\n\nArgs:\n    farmer_id (str): Farmer's unique ID.\n    data (dict): Farmer's original data.\n\nReturns:\n    dict: Response from the country's API.", "code": "    def process_farmer_data(self, farmer_id, data):\n        \"\"\"\n        Processes and enriches farmer data, then sends it to the country's API.\n\n        Args:\n            farmer_id (str): Farmer's unique ID.\n            data (dict): Farmer's original data.\n\n        Returns:\n            dict: Response from the country's API.\n        \"\"\"\n        enriched_data = self.data_enricher.enrich(data)\n        self.database_manager.save_farmer(farmer_id, enriched_data)\n        return self.country_api_manager.send_to_country_api(enriched_data)\n", "keywords": ["API", "farmer"]}], "keywords": ["API", "farmer"]}, {"type": "function", "name": "__init__", "file": "farmer_management/app/event_handler.py", "docstring": null, "code": "    def __init__(self, data_enricher, country_api_manager, database_manager):\n        self.data_enricher = data_enricher\n        self.country_api_manager = country_api_manager\n        self.database_manager = database_manager\n", "calls": [], "keywords": ["API"]}, {"type": "function", "name": "process_farmer_data", "file": "farmer_management/app/event_handler.py", "docstring": "Processes and enriches farmer data, then sends it to the country's API.\n\nArgs:\n    farmer_id (str): Farmer's unique ID.\n    data (dict): Farmer's original data.\n\nReturns:\n    dict: Response from the country's API.", "code": "    def process_farmer_data(self, farmer_id, data):\n        \"\"\"\n        Processes and enriches farmer data, then sends it to the country's API.\n\n        Args:\n            farmer_id (str): Farmer's unique ID.\n            data (dict): Farmer's original data.\n\n        Returns:\n            dict: Response from the country's API.\n        \"\"\"\n        enriched_data = self.data_enricher.enrich(data)\n        self.database_manager.save_farmer(farmer_id, enriched_data)\n        return self.country_api_manager.send_to_country_api(enriched_data)\n", "calls": ["enrich", "save_farmer", "send_to_country_api"], "keywords": ["API", "farmer"]}, {"type": "class", "name": "DatabaseManager", "file": "farmer_management/app/database_manager.py", "docstring": "Manages database operations for farmer data.", "methods": [{"name": "__init__", "docstring": null, "code": "    def __init__(self):\n        self.database = {}  # Simulating an in-memory database\n", "keywords": []}, {"name": "save_farmer", "docstring": "Saves farmer data to the database.\n\nArgs:\n    farmer_id (str): Farmer's unique ID.\n    data (dict): Farmer's data to save.", "code": "    def save_farmer(self, farmer_id, data):\n        \"\"\"\n        Saves farmer data to the database.\n\n        Args:\n            farmer_id (str): Farmer's unique ID.\n            data (dict): Farmer's data to save.\n        \"\"\"\n        self.database[farmer_id] = data\n        print(f\"Farmer {farmer_id} saved to database.\")\n", "keywords": ["farmer"]}, {"name": "get_farmer", "docstring": "Retrieves farmer data from the database.\n\nArgs:\n    farmer_id (str): Farmer's unique ID.\n\nReturns:\n    dict: Farmer's data.", "code": "    def get_farmer(self, farmer_id):\n        \"\"\"\n        Retrieves farmer data from the database.\n\n        Args:\n            farmer_id (str): Farmer's unique ID.\n\n        Returns:\n            dict: Farmer's data.\n        \"\"\"\n        return self.database.get(farmer_id, {})\n", "keywords": ["farmer"]}, {"name": "delete", "docstring": "Deletes farmer data from the database.\n\nArgs:\n    farmer_id (int): ID of the farmer to delete.", "code": "    def delete(self, farmer_id: int) -> None:\n        \"\"\"\n        Deletes farmer data from the database.\n\n        Args:\n            farmer_id (int): ID of the farmer to delete.\n        \"\"\"\n        print(f\"Deleting from DB: Farmer ID {farmer_id}\")\n", "keywords": ["farmer"]}], "keywords": ["farmer"]}, {"type": "function", "name": "__init__", "file": "farmer_management/app/database_manager.py", "docstring": null, "code": "    def __init__(self):\n        self.database = {}  # Simulating an in-memory database\n", "calls": [], "keywords": []}, {"type": "function", "name": "save_farmer", "file": "farmer_management/app/database_manager.py", "docstring": "Saves farmer data to the database.\n\nArgs:\n    farmer_id (str): Farmer's unique ID.\n    data (dict): Farmer's data to save.", "code": "    def save_farmer(self, farmer_id, data):\n        \"\"\"\n        Saves farmer data to the database.\n\n        Args:\n            farmer_id (str): Farmer's unique ID.\n            data (dict): Farmer's data to save.\n        \"\"\"\n        self.database[farmer_id] = data\n        print(f\"Farmer {farmer_id} saved to database.\")\n", "calls": ["print"], "keywords": ["farmer"]}, {"type": "function", "name": "get_farmer", "file": "farmer_management/app/database_manager.py", "docstring": "Retrieves farmer data from the database.\n\nArgs:\n    farmer_id (str): Farmer's unique ID.\n\nReturns:\n    dict: Farmer's data.", "code": "    def get_farmer(self, farmer_id):\n        \"\"\"\n        Retrieves farmer data from the database.\n\n        Args:\n            farmer_id (str): Farmer's unique ID.\n\n        Returns:\n            dict: Farmer's data.\n        \"\"\"\n        return self.database.get(farmer_id, {})\n", "calls": ["get"], "keywords": ["farmer"]}, {"type": "function", "name": "delete", "file": "farmer_management/app/database_manager.py", "docstring": "Deletes farmer data from the database.\n\nArgs:\n    farmer_id (int): ID of the farmer to delete.", "code": "    def delete(self, farmer_id: int) -> None:\n        \"\"\"\n        Deletes farmer data from the database.\n\n        Args:\n            farmer_id (int): ID of the farmer to delete.\n        \"\"\"\n        print(f\"Deleting from DB: Farmer ID {farmer_id}\")\n", "calls": ["print"], "keywords": ["farmer"]}, {"type": "class", "name": "CountryAPIManager", "file": "farmer_management/app/country_api_manager.py", "docstring": "Manages API communication for country-specific agriculture departments.", "methods": [{"name": "send_to_country_api", "docstring": "Sends enriched farmer data to the respective country's API.\n\nArgs:\n    data (dict): Enriched farmer data.\n\nReturns:\n    dict: Response from the country's API.", "code": "    def send_to_country_api(self, data):\n        \"\"\"\n        Sends enriched farmer data to the respective country's API.\n\n        Args:\n            data (dict): Enriched farmer data.\n\n        Returns:\n            dict: Response from the country's API.\n        \"\"\"\n        country = data.get(\"country\")\n        print(f\"Sending data to {country}'s API...\")\n        # Simulate sending data\n        return {\"status\": \"success\", \"message\": f\"Data sent to {country}'s API\"}\n", "keywords": ["API", "farmer"]}], "keywords": ["API", "farmer"]}, {"type": "function", "name": "send_to_country_api", "file": "farmer_management/app/country_api_manager.py", "docstring": "Sends enriched farmer data to the respective country's API.\n\nArgs:\n    data (dict): Enriched farmer data.\n\nReturns:\n    dict: Response from the country's API.", "code": "    def send_to_country_api(self, data):\n        \"\"\"\n        Sends enriched farmer data to the respective country's API.\n\n        Args:\n            data (dict): Enriched farmer data.\n\n        Returns:\n            dict: Response from the country's API.\n        \"\"\"\n        country = data.get(\"country\")\n        print(f\"Sending data to {country}'s API...\")\n        # Simulate sending data\n        return {\"status\": \"success\", \"message\": f\"Data sent to {country}'s API\"}\n", "calls": ["get", "print"], "keywords": ["API", "farmer"]}, {"type": "function", "name": "validate_farmer_data", "file": "farmer_management/app/validation_service.py", "docstring": "Validates farmer data to ensure it meets business rules.\n\nArgs:\n    data (dict): Farmer data to validate.\n\nRaises:\n    ValueError: If the farmer's data does not meet validation criteria.", "code": "def validate_farmer_data(data):\n    \"\"\"\n    Validates farmer data to ensure it meets business rules.\n\n    Args:\n        data (dict): Farmer data to validate.\n\n    Raises:\n        ValueError: If the farmer's data does not meet validation criteria.\n    \"\"\"\n    if \"name\" not in data or not data[\"name\"]:\n        raise ValueError(\"Farmer name is required.\")\n    if \"country\" not in data or not data[\"country\"]:\n        raise ValueError(\"Farmer country is required.\")\n    if \"crops\" not in data or not isinstance(data[\"crops\"], list) or not data[\"crops\"]:\n        raise ValueError(\"At least one crop must be specified.\")\n    if data.get(\"experience_years\", 0) < 0:\n        raise ValueError(\"Experience years cannot be negative.\")\n\n    # Country-specific validations\n    if data[\"country\"] == \"India\" and not any(\n        crop in [\"rice\", \"wheat\"] for crop in data[\"crops\"]\n    ):\n        raise ValueError(\"Farmers in India must grow either rice or wheat.\")\n    if data[\"country\"] == \"USA\" and not any(\n        crop in [\"corn\", \"soybeans\"] for crop in data[\"crops\"]\n    ):\n        raise ValueError(\"Farmers in the USA must grow either corn or soybeans.\")\n    if data[\"country\"] == \"France\" and \"grapes\" not in data[\"crops\"]:\n        raise ValueError(\"Farmers in France must grow grapes.\")\n\n    print(\"Validation successful.\")\n", "calls": ["print", "ValueError", "ValueError", "ValueError", "get", "ValueError", "ValueError", "ValueError", "ValueError", "isinstance", "any", "any"], "keywords": ["validation", "USA", "farmer", "India", "France"]}, {"type": "function", "name": "test_enrich_data_india", "file": "farmer_management/tests/test_enrichment_service.py", "docstring": null, "code": "def test_enrich_data_india():\n    input_data = {\n        \"country\": \"USA\",\n        \"state\": \"Georgia\",\n        \"crops\": [\"Corn\"],\n    }\n    enriched_data = enrich_data(input_data)\n    assert enriched_data[\"region\"] == \"Georgia\"\n    assert enriched_data[\"is_enriched\"] is True\n", "calls": ["enrich_data"], "keywords": ["USA", "India"]}]